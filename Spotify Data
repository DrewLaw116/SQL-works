-- For this project, I downloaded Spotify data from Kaggle and used the data to create a table. 

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Following this, I inserted the Spotify Data .csv into the table.

-Afterwards, I analyzed the data using the following SQL queries. 

--Who are the top 10 artists based on popularity
SELECT artist_name
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

--Who are the 10 least popular artists
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity
LIMIT 10;

--What are Olivia Rodrigo's popular songs and which is the most danceable
SELECT artist_name, track_name, popularity, danceability
FROM BIT_DB.Spotifydata
WHERE artist_name = "Olivia Rodrigo"
ORDER BY danceability desc;

--Rank the top 20 songs as great, good or mid based on popularity
SELECT artist_name, track_name, popularity,
CASE WHEN popularity>=90 THEN "Great"
WHEN popularity>=80 THEN "Good"
ELSE "Mid"
END AS "Rating"
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC 
LIMIT 20;

--Which artist releases the longest song and how danceable was it
SELECT artist_name, track_name, MAX(duration_ms)/1000 AS length, danceability
FROM BIT_DB.Spotifydata 
ORDER BY popularity
LIMIT 1;

--Rate the top 10 popular songs as very danceable, danceable or chill
SELECT artist_name, track_name, danceability,
CASE WHEN danceability >= 0.8 THEN "Very Danceable"
WHEN danceability >= 0.714 THEN "Danceable"
ELSE "Chill"
END AS "Dance Rating"
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

